# advocacia_app_full.py
"""
Sistema completo de Advocacia - desktop (PyQt5) + SQLite
Funcionalidades:
- Login com bcrypt
- Gestão de usuários (criar/editar/excluir, alterar senha)
- Clientes (CRUD)
- Processos (CRUD, vinculados a clientes)
- Agenda (CRUD)
- Financeiro (CRUD)
- Relatórios (PDF) com filtros + export CSV/Excel
- UI moderno/estilizado (menu lateral, botões arredondados, cores suaves)
- Export CSV + Excel (xlsxwriter optional)
- PDF com logo opcional
- Instruções para gerar .exe com PyInstaller

Dependências:
pip install PyQt5 reportlab bcrypt xlsxwriter

Observação: admin inicial criado automaticamente (login: admin, senha: admin).
"""

import sys
import os
import sqlite3
import csv
import bcrypt
from datetime import datetime
from functools import partial

from PyQt5.QtWidgets import (
    QApplication, QDialog, QWidget, QLabel, QLineEdit, QPushButton,
    QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QMessageBox, QStackedWidget, QComboBox, QTextEdit, QDateEdit, QTimeEdit,
    QFileDialog, QFrame, QSizePolicy, QSpinBox, QCheckBox, QGroupBox
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont

# Optional import for excel export
try:
    import xlsxwriter
    HAVE_XLSXWRITER = True
except Exception:
    HAVE_XLSXWRITER = False

# PDF
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

DB_FILE = "advocacia.db"

# -------------------- Database helpers --------------------
def conectar():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    # tables
    cursor.execute("""CREATE TABLE IF NOT EXISTS usuarios (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT,
                        login TEXT UNIQUE,
                        senha TEXT,
                        nivel TEXT
                      )""")
    cursor.execute("""CREATE TABLE IF NOT EXISTS clientes (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT,
                        cpf_cnpj TEXT,
                        telefone TEXT,
                        email TEXT,
                        endereco TEXT
                      )""")
    cursor.execute("""CREATE TABLE IF NOT EXISTS processos (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        cliente_id INTEGER,
                        numero TEXT,
                        tipo TEXT,
                        status TEXT,
                        data_abertura TEXT,
                        descricao TEXT,
                        FOREIGN KEY(cliente_id) REFERENCES clientes(id)
                      )""")
    cursor.execute("""CREATE TABLE IF NOT EXISTS agenda (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        titulo TEXT,
                        descricao TEXT,
                        data TEXT,
                        hora TEXT
                      )""")
    cursor.execute("""CREATE TABLE IF NOT EXISTS financeiro (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        descricao TEXT,
                        tipo TEXT,
                        valor REAL,
                        data TEXT
                      )""")
    conn.commit()
    return conn, cursor

# -------------------- Security helpers --------------------
def hash_password(password: str) -> str:
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

def check_password(password: str, hashed: str) -> bool:
    try:
        return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))
    except Exception:
        return False

# -------------------- Login dialog --------------------
class LoginDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Login - Advocacia")
        self.setFixedSize(420, 220)
        self.setStyleSheet("background-color:#f6f9fc;")
        self.build_ui()

    def build_ui(self):
        layout = QVBoxLayout()
        title = QLabel("Sistema de Advocacia")
        title.setFont(QFont("Segoe UI", 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        self.user_input = QLineEdit(); self.user_input.setPlaceholderText("Login")
        self.pwd_input = QLineEdit(); self.pwd_input.setPlaceholderText("Senha"); self.pwd_input.setEchoMode(QLineEdit.Password)
        layout.addWidget(QLabel("Login:")); layout.addWidget(self.user_input)
        layout.addWidget(QLabel("Senha:")); layout.addWidget(self.pwd_input)

        btn_layout = QHBoxLayout()
        self.btn_login = QPushButton("Entrar"); self.btn_login.setStyleSheet("background:#2e86c1;color:white;height:36px;border-radius:6px;font-weight:bold;")
        self.btn_login.clicked.connect(self.try_login)
        self.btn_reset = QPushButton("Reset admin"); self.btn_reset.setStyleSheet("background:#95a5a6;color:white;height:30px;border-radius:6px;")
        self.btn_reset.clicked.connect(self.reset_admin)
        btn_layout.addWidget(self.btn_login); btn_layout.addWidget(self.btn_reset)

        layout.addLayout(btn_layout)
        self.setLayout(layout)

    def try_login(self):
        username = self.user_input.text().strip()
        password = self.pwd_input.text().strip()
        if not username or not password:
            QMessageBox.warning(self, "Aviso", "Informe login e senha.")
            return
        conn, cur = conectar()
        cur.execute("SELECT senha FROM usuarios WHERE login=?", (username,))
        row = cur.fetchone()
        conn.close()
        if row and check_password(password, row[0]):
            self.accept()
        else:
            QMessageBox.warning(self, "Erro", "Login ou senha incorretos.")

    def reset_admin(self):
        # convenience: create or reset admin to password 'admin'
        conn, cur = conectar()
        hashed = hash_password("admin")
        cur.execute("SELECT id FROM usuarios WHERE login='admin'")
        if cur.fetchone():
            cur.execute("UPDATE usuarios SET senha=? WHERE login='admin'", (hashed,))
        else:
            cur.execute("INSERT INTO usuarios (nome,login,senha,nivel) VALUES (?,?,?,?)",
                        ("Administrador", "admin", hashed, "admin"))
        conn.commit(); conn.close()
        QMessageBox.information(self, "OK", "Senha do admin definida para 'admin' (hasheada).")

# -------------------- Main Application --------------------
class AdvocaciaApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Advocacia - Sistema")
        self.setGeometry(80, 30, 1280, 820)
        self.setStyleSheet("background-color:#f4f7fb; font-family: 'Segoe UI', Arial; font-size:11pt;")
        self.logo_path = None
        self.build_ui()

    def build_ui(self):
        main_layout = QHBoxLayout(); self.setLayout(main_layout)

        # left menu
        menu_frame = QFrame(); menu_frame.setFixedWidth(220)
        menu_frame.setStyleSheet("background:#1f2d3d; color:white; border-radius:8px; padding:12px;")
        menu_layout = QVBoxLayout(); menu_layout.setAlignment(Qt.AlignTop)
        font_btn = "background:#2d6ca2;color:white;height:44px;border-radius:8px;font-weight:bold;"
        self.btn_clients = QPushButton("Clientes"); self.btn_clients.setStyleSheet(font_btn)
        self.btn_processos = QPushButton("Processos"); self.btn_processos.setStyleSheet(font_btn)
        self.btn_agenda = QPushButton("Agenda"); self.btn_agenda.setStyleSheet(font_btn)
        self.btn_fin = QPushButton("Financeiro"); self.btn_fin.setStyleSheet(font_btn)
        self.btn_reports = QPushButton("Relatórios"); self.btn_reports.setStyleSheet(font_btn)
        self.btn_users = QPushButton("Usuários"); self.btn_users.setStyleSheet(font_btn)
        menu_layout.addWidget(self.btn_clients); menu_layout.addSpacing(6)
        menu_layout.addWidget(self.btn_processos); menu_layout.addSpacing(6)
        menu_layout.addWidget(self.btn_agenda); menu_layout.addSpacing(6)
        menu_layout.addWidget(self.btn_fin); menu_layout.addSpacing(6)
        menu_layout.addWidget(self.btn_reports); menu_layout.addSpacing(6)
        menu_layout.addWidget(self.btn_users); menu_layout.addStretch()
        menu_frame.setLayout(menu_layout)
        main_layout.addWidget(menu_frame)

        # stacked pages
        self.stacked = QStackedWidget(); main_layout.addWidget(self.stacked)

        # connect menu
        self.btn_clients.clicked.connect(lambda: self.stacked.setCurrentIndex(0))
        self.btn_processos.clicked.connect(lambda: self.stacked.setCurrentIndex(1))
        self.btn_agenda.clicked.connect(lambda: self.stacked.setCurrentIndex(2))
        self.btn_fin.clicked.connect(lambda: self.stacked.setCurrentIndex(3))
        self.btn_reports.clicked.connect(lambda: self.stacked.setCurrentIndex(4))
        self.btn_users.clicked.connect(lambda: self.stacked.setCurrentIndex(5))

        # pages
        self.page_clients(); self.page_processos(); self.page_agenda(); self.page_financeiro(); self.page_reports(); self.page_users()

        # initial load
        self.refresh_all()

    # ---------------- Clients page ----------------
    def page_clients(self):
        page = QWidget(); layout = QVBoxLayout(); layout.setContentsMargins(12,12,12,12)
        header = QLabel("Clientes"); header.setFont(QFont("Segoe UI", 16, QFont.Bold)); layout.addWidget(header)
        # form
        form = QHBoxLayout()
        self.c_nome = QLineEdit(); self.c_nome.setPlaceholderText("Nome")
        self.c_cpf = QLineEdit(); self.c_cpf.setPlaceholderText("CPF/CNPJ")
        self.c_tel = QLineEdit(); self.c_tel.setPlaceholderText("Telefone")
        self.c_mail = QLineEdit(); self.c_mail.setPlaceholderText("E-mail")
        self.c_end = QLineEdit(); self.c_end.setPlaceholderText("Endereço")
        self.btn_save_client = QPushButton("Salvar Cliente"); self.btn_save_client.setStyleSheet("background:#2ecc71;color:white;border-radius:6px;height:34px;")
        self.btn_save_client.clicked.connect(self.save_client)
        form.addWidget(self.c_nome); form.addWidget(self.c_cpf); form.addWidget(self.c_tel); form.addWidget(self.c_mail); form.addWidget(self.c_end); form.addWidget(self.btn_save_client)
        layout.addLayout(form)

        # actions edit/delete
        actions = QHBoxLayout()
        self.btn_edit_client = QPushButton("Editar selecionado"); self.btn_edit_client.setStyleSheet("background:#f39c12;color:white;")
        self.btn_delete_client = QPushButton("Excluir selecionado"); self.btn_delete_client.setStyleSheet("background:#e74c3c;color:white;")
        self.btn_edit_client.clicked.connect(self.edit_client); self.btn_delete_client.clicked.connect(self.delete_client)
        actions.addWidget(self.btn_edit_client); actions.addWidget(self.btn_delete_client)
        layout.addLayout(actions)

        # table
        self.tbl_clients = QTableWidget(); self.tbl_clients.setColumnCount(6)
        self.tbl_clients.setHorizontalHeaderLabels(["ID","Nome","CPF/CNPJ","Telefone","E-mail","Endereço"])
        self.tbl_clients.setAlternatingRowColors(True)
        layout.addWidget(self.tbl_clients)
        page.setLayout(layout)
        self.stacked.addWidget(page)

    def save_client(self):
        nome = self.c_nome.text().strip(); cpf = self.c_cpf.text().strip()
        tel = self.c_tel.text().strip(); mail = self.c_mail.text().strip(); end = self.c_end.text().strip()
        if not nome or not cpf:
            QMessageBox.warning(self, "Erro", "Nome e CPF/CNPJ obrigatórios.")
            return
        try:
            conn, cur = conectar()
            cur.execute("INSERT INTO clientes (nome,cpf_cnpj,telefone,email,endereco) VALUES (?,?,?,?,?)",(nome,cpf,tel,mail,end))
            conn.commit(); conn.close()
            self.c_nome.clear(); self.c_cpf.clear(); self.c_tel.clear(); self.c_mail.clear(); self.c_end.clear()
            self.load_clients()
            QMessageBox.information(self, "OK", "Cliente salvo.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    def load_clients(self):
        conn, cur = conectar()
        cur.execute("SELECT * FROM clientes ORDER BY nome")
        rows = cur.fetchall(); conn.close()
        self.tbl_clients.setRowCount(len(rows))
        for i, r in enumerate(rows):
            for j, val in enumerate(r):
                item = QTableWidgetItem(str(val)); item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                self.tbl_clients.setItem(i, j, item)
        self.tbl_clients.resizeColumnsToContents()

    def edit_client(self):
        row = self.tbl_clients.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um cliente.")
            return
        cid = self.tbl_clients.item(row,0).text()
        conn, cur = conectar()
        cur.execute("SELECT nome,cpf_cnpj,telefone,email,endereco FROM clientes WHERE id=?", (cid,))
        data = cur.fetchone(); conn.close()
        if not data:
            QMessageBox.warning(self, "Erro", "Cliente não encontrado.")
            return
        dlg = QDialog(self); dlg.setWindowTitle("Editar Cliente"); dlg.setFixedSize(700,260)
        v = QVBoxLayout()
        e_nome = QLineEdit(data[0]); e_cpf = QLineEdit(data[1]); e_tel = QLineEdit(data[2]); e_mail = QLineEdit(data[3]); e_end = QLineEdit(data[4])
        v.addWidget(QLabel("Nome:")); v.addWidget(e_nome)
        v.addWidget(QLabel("CPF/CNPJ:")); v.addWidget(e_cpf)
        v.addWidget(QLabel("Telefone:")); v.addWidget(e_tel)
        v.addWidget(QLabel("E-mail:")); v.addWidget(e_mail)
        v.addWidget(QLabel("Endereço:")); v.addWidget(e_end)
        h = QHBoxLayout(); btn_ok = QPushButton("Atualizar"); btn_cancel = QPushButton("Cancelar")
        btn_ok.clicked.connect(lambda: self.do_update_client(cid, e_nome.text(), e_cpf.text(), e_tel.text(), e_mail.text(), e_end.text(), dlg))
        btn_cancel.clicked.connect(dlg.reject)
        h.addWidget(btn_ok); h.addWidget(btn_cancel)
        v.addLayout(h)
        dlg.setLayout(v); dlg.exec_()

    def do_update_client(self, cid, nome, cpf, tel, mail, end, dlg):
        if not nome.strip() or not cpf.strip():
            QMessageBox.warning(dlg, "Erro", "Nome e CPF obrigatórios.")
            return
        try:
            conn, cur = conectar()
            cur.execute("UPDATE clientes SET nome=?, cpf_cnpj=?, telefone=?, email=?, endereco=? WHERE id=?",
                        (nome.strip(), cpf.strip(), tel.strip(), mail.strip(), end.strip(), cid))
            conn.commit(); conn.close()
            dlg.accept()
            self.load_clients(); self.load_process_clients_combo()
            QMessageBox.information(self, "OK", "Cliente atualizado.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    def delete_client(self):
        row = self.tbl_clients.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um cliente.")
            return
        cid = self.tbl_clients.item(row,0).text()
        if QMessageBox.question(self, "Confirmar", "Excluir cliente?") != QMessageBox.Yes:
            return
        try:
            conn, cur = conectar()
            cur.execute("DELETE FROM clientes WHERE id=?", (cid,))
            conn.commit(); conn.close()
            self.load_clients(); self.load_process_clients_combo()
            QMessageBox.information(self, "OK", "Cliente excluído.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    # ---------------- Processos page ----------------
    def page_processos(self):
        page = QWidget(); layout = QVBoxLayout(); layout.setContentsMargins(12,12,12,12)
        header = QLabel("Processos"); header.setFont(QFont("Segoe UI", 16, QFont.Bold)); layout.addWidget(header)
        form = QHBoxLayout()
        self.pro_cliente = QComboBox()
        self.pro_num = QLineEdit(); self.pro_num.setPlaceholderText("Número")
        self.pro_tipo = QLineEdit(); self.pro_tipo.setPlaceholderText("Tipo")
        self.pro_status = QLineEdit(); self.pro_status.setPlaceholderText("Status")
        self.pro_data = QDateEdit(); self.pro_data.setCalendarPopup(True)
        self.btn_save_proc = QPushButton("Salvar Processo"); self.btn_save_proc.setStyleSheet("background:#f39c12;color:white;border-radius:6px;height:34px;")
        self.btn_save_proc.clicked.connect(self.save_process)
        form.addWidget(self.pro_cliente); form.addWidget(self.pro_num); form.addWidget(self.pro_tipo); form.addWidget(self.pro_status); form.addWidget(self.pro_data); form.addWidget(self.btn_save_proc)
        layout.addLayout(form)

        actions = QHBoxLayout()
        self.btn_edit_proc = QPushButton("Editar selecionado"); self.btn_delete_proc = QPushButton("Excluir selecionado")
        self.btn_edit_proc.clicked.connect(self.edit_process); self.btn_delete_proc.clicked.connect(self.delete_process)
        actions.addWidget(self.btn_edit_proc); actions.addWidget(self.btn_delete_proc)
        layout.addLayout(actions)

        self.tbl_proc = QTableWidget(); self.tbl_proc.setColumnCount(7)
        self.tbl_proc.setHorizontalHeaderLabels(["ID","Cliente","Número","Tipo","Status","Data Abertura","Descrição"])
        self.tbl_proc.setAlternatingRowColors(True)
        layout.addWidget(self.tbl_proc)
        page.setLayout(layout); self.stacked.addWidget(page)
        self.load_process_clients_combo(); self.load_processes()

    def load_process_clients_combo(self):
        self.pro_cliente.clear()
        conn, cur = conectar()
        cur.execute("SELECT id,nome FROM clientes ORDER BY nome")
        for id_, nome in cur.fetchall():
            self.pro_cliente.addItem(nome, id_)
        conn.close()

    def save_process(self):
        cliente_id = self.pro_cliente.currentData()
        numero = self.pro_num.text().strip()
        tipo = self.pro_tipo.text().strip(); status = self.pro_status.text().strip()
        data = self.pro_data.date().toString("yyyy-MM-dd")
        if not numero:
            QMessageBox.warning(self, "Erro", "Número do processo é obrigatório.")
            return
        try:
            conn, cur = conectar()
            cur.execute("INSERT INTO processos (cliente_id,numero,tipo,status,data_abertura,descricao) VALUES (?,?,?,?,?,?)",
                        (cliente_id, numero, tipo, status, data, ""))
            conn.commit(); conn.close()
            self.pro_num.clear(); self.pro_tipo.clear(); self.pro_status.clear()
            self.load_processes()
            QMessageBox.information(self, "OK", "Processo salvo.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    def load_processes(self):
        conn, cur = conectar()
        cur.execute("""SELECT p.id, c.nome, p.numero, p.tipo, p.status, p.data_abertura, p.descricao
                       FROM processos p LEFT JOIN clientes c ON p.cliente_id = c.id
                       ORDER BY p.data_abertura DESC""")
        rows = cur.fetchall(); conn.close()
        self.tbl_proc.setRowCount(len(rows))
        for i, r in enumerate(rows):
            for j, val in enumerate(r):
                item = QTableWidgetItem(str(val if val is not None else "")); item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                self.tbl_proc.setItem(i, j, item)
        self.tbl_proc.resizeColumnsToContents()

    def edit_process(self):
        row = self.tbl_proc.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um processo.")
            return
        pid = self.tbl_proc.item(row,0).text()
        conn, cur = conectar()
        cur.execute("SELECT cliente_id,numero,tipo,status,data_abertura,descricao FROM processos WHERE id=?", (pid,))
        rec = cur.fetchone(); conn.close()
        if not rec:
            QMessageBox.warning(self, "Erro", "Processo não encontrado.")
            return
        dlg = QDialog(self); dlg.setWindowTitle("Editar Processo"); dlg.setFixedSize(760,320)
        v = QVBoxLayout()
        combo = QComboBox(); self.load_process_clients_combo_into(combo)
        # preselect client
        for i in range(combo.count()):
            if combo.itemData(i) == rec[0]:
                combo.setCurrentIndex(i); break
        e_num = QLineEdit(rec[1]); e_tipo = QLineEdit(rec[2]); e_status = QLineEdit(rec[3])
        e_data = QDateEdit(); e_data.setCalendarPopup(True); e_data.setDate(e_data.date().fromString(rec[4], "yyyy-MM-dd"))
        e_desc = QTextEdit(rec[5])
        v.addWidget(QLabel("Cliente:")); v.addWidget(combo)
        v.addWidget(QLabel("Número:")); v.addWidget(e_num)
        v.addWidget(QLabel("Tipo:")); v.addWidget(e_tipo)
        v.addWidget(QLabel("Status:")); v.addWidget(e_status)
        v.addWidget(QLabel("Data Abertura:")); v.addWidget(e_data)
        v.addWidget(QLabel("Descrição:")); v.addWidget(e_desc)
        h = QHBoxLayout(); btn_ok = QPushButton("Atualizar"); btn_cancel = QPushButton("Cancelar")
        btn_ok.clicked.connect(lambda: self.do_update_process(pid, combo.currentData(), e_num.text(), e_tipo.text(), e_status.text(), e_data.date().toString("yyyy-MM-dd"), e_desc.toPlainText(), dlg))
        btn_cancel.clicked.connect(dlg.reject); h.addWidget(btn_ok); h.addWidget(btn_cancel)
        v.addLayout(h); dlg.setLayout(v); dlg.exec_()

    def load_process_clients_combo_into(self, combo):
        try:
            conn, cur = conectar(); cur.execute("SELECT id,nome FROM clientes ORDER BY nome")
            for id_, nome in cur.fetchall():
                combo.addItem(nome, id_)
            conn.close()
        except:
            pass

    def do_update_process(self, pid, cliente_id, numero, tipo, status, data, descricao, dlg):
        if not numero.strip():
            QMessageBox.warning(dlg, "Erro", "Número obrigatório.")
            return
        try:
            conn, cur = conectar()
            cur.execute("UPDATE processos SET cliente_id=?, numero=?, tipo=?, status=?, data_abertura=?, descricao=? WHERE id=?",
                        (cliente_id, numero.strip(), tipo.strip(), status.strip(), data, descricao.strip(), pid))
            conn.commit(); conn.close(); dlg.accept(); self.load_processes(); QMessageBox.information(self, "OK", "Processo atualizado.")
        except Exception as e:
            QMessageBox.critical(dlg, "Erro", str(e))

    def delete_process(self):
        row = self.tbl_proc.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um processo.")
            return
        pid = self.tbl_proc.item(row,0).text()
        if QMessageBox.question(self, "Confirmar", "Excluir processo selecionado?") != QMessageBox.Yes:
            return
        try:
            conn, cur = conectar(); cur.execute("DELETE FROM processos WHERE id=?", (pid,)); conn.commit(); conn.close()
            self.load_processes(); QMessageBox.information(self, "OK", "Processo excluído.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    # ---------------- Agenda page ----------------
    def page_agenda(self):
        page = QWidget(); layout = QVBoxLayout(); layout.setContentsMargins(12,12,12,12)
        header = QLabel("Agenda"); header.setFont(QFont("Segoe UI", 16, QFont.Bold)); layout.addWidget(header)
        form = QHBoxLayout()
        self.ag_titulo = QLineEdit(); self.ag_titulo.setPlaceholderText("Título")
        self.ag_desc = QTextEdit(); self.ag_desc.setPlaceholderText("Descrição")
        self.ag_data = QDateEdit(); self.ag_data.setCalendarPopup(True)
        self.ag_hora = QTimeEdit()
        self.btn_save_ag = QPushButton("Salvar"); self.btn_save_ag.setStyleSheet("background:#8e44ad;color:white;height:34px;border-radius:6px;")
        self.btn_save_ag.clicked.connect(self.save_agenda)
        form.addWidget(self.ag_titulo); form.addWidget(self.ag_desc); form.addWidget(self.ag_data); form.addWidget(self.ag_hora); form.addWidget(self.btn_save_ag)
        layout.addLayout(form)

        actions = QHBoxLayout()
        self.btn_edit_ag = QPushButton("Editar selecionado"); self.btn_del_ag = QPushButton("Excluir selecionado")
        self.btn_edit_ag.clicked.connect(self.edit_agenda); self.btn_del_ag.clicked.connect(self.delete_agenda)
        actions.addWidget(self.btn_edit_ag); actions.addWidget(self.btn_del_ag); layout.addLayout(actions)

        self.tbl_agenda = QTableWidget(); self.tbl_agenda.setColumnCount(4)
        self.tbl_agenda.setHorizontalHeaderLabels(["Título","Descrição","Data","Hora"])
        self.tbl_agenda.setAlternatingRowColors(True)
        layout.addWidget(self.tbl_agenda)
        page.setLayout(layout); self.stacked.addWidget(page)
        self.load_agenda()

    def save_agenda(self):
        titulo = self.ag_titulo.text().strip(); desc = self.ag_desc.toPlainText().strip()
        data = self.ag_data.date().toString("yyyy-MM-dd"); hora = self.ag_hora.time().toString("HH:mm")
        if not titulo:
            QMessageBox.warning(self, "Erro", "Título obrigatório.")
            return
        try:
            conn, cur = conectar(); cur.execute("INSERT INTO agenda (titulo,descricao,data,hora) VALUES (?,?,?,?)",(titulo,desc,data,hora)); conn.commit(); conn.close()
            self.ag_titulo.clear(); self.ag_desc.clear(); self.load_agenda(); QMessageBox.information(self, "OK", "Compromisso salvo.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    def load_agenda(self):
        conn, cur = conectar(); cur.execute("SELECT titulo,descricao,data,hora FROM agenda ORDER BY data DESC"); rows = cur.fetchall(); conn.close()
        self.tbl_agenda.setRowCount(len(rows))
        for i, r in enumerate(rows):
            for j, val in enumerate(r):
                item = QTableWidgetItem(str(val)); item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                self.tbl_agenda.setItem(i, j, item)
        self.tbl_agenda.resizeColumnsToContents()

    def edit_agenda(self):
        row = self.tbl_agenda.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um compromisso.")
            return
        titulo = self.tbl_agenda.item(row,0).text(); data = self.tbl_agenda.item(row,2).text(); hora = self.tbl_agenda.item(row,3).text()
        conn, cur = conectar(); cur.execute("SELECT id,titulo,descricao,data,hora FROM agenda WHERE titulo=? AND data=? AND hora=? LIMIT 1", (titulo,data,hora))
        rec = cur.fetchone(); conn.close()
        if not rec:
            QMessageBox.warning(self, "Erro", "Compromisso não encontrado."); return
        aid = rec[0]
        dlg = QDialog(self); dlg.setWindowTitle("Editar Compromisso"); dlg.setFixedSize(700,300)
        v = QVBoxLayout()
        e_titulo = QLineEdit(rec[1]); e_desc = QTextEdit(rec[2]); e_date = QDateEdit(); e_date.setCalendarPopup(True); e_date.setDate(e_date.date().fromString(rec[3], "yyyy-MM-dd"))
        e_time = QTimeEdit(); e_time.setTime(e_time.time().fromString(rec[4], "HH:mm"))
        v.addWidget(QLabel("Título:")); v.addWidget(e_titulo); v.addWidget(QLabel("Descrição:")); v.addWidget(e_desc)
        v.addWidget(QLabel("Data:")); v.addWidget(e_date); v.addWidget(QLabel("Hora:")); v.addWidget(e_time)
        h = QHBoxLayout(); btn_ok = QPushButton("Atualizar"); btn_cancel = QPushButton("Cancelar")
        btn_ok.clicked.connect(lambda: self.do_update_agenda(aid, e_titulo.text(), e_desc.toPlainText(), e_date.date().toString("yyyy-MM-dd"), e_time.time().toString("HH:mm"), dlg))
        btn_cancel.clicked.connect(dlg.reject); h.addWidget(btn_ok); h.addWidget(btn_cancel)
        v.addLayout(h); dlg.setLayout(v); dlg.exec_()

    def do_update_agenda(self, aid, titulo, desc, data, hora, dlg):
        if not titulo.strip():
            QMessageBox.warning(dlg, "Erro", "Título obrigatório.")
            return
        try:
            conn, cur = conectar(); cur.execute("UPDATE agenda SET titulo=?,descricao=?,data=?,hora=? WHERE id=?", (titulo.strip(), desc.strip(), data, hora, aid)); conn.commit(); conn.close()
            dlg.accept(); self.load_agenda(); QMessageBox.information(self, "OK", "Compromisso atualizado.")
        except Exception as e:
            QMessageBox.critical(dlg, "Erro", str(e))

    def delete_agenda(self):
        row = self.tbl_agenda.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um compromisso.")
            return
        titulo = self.tbl_agenda.item(row,0).text(); data = self.tbl_agenda.item(row,2).text(); hora = self.tbl_agenda.item(row,3).text()
        if QMessageBox.question(self, "Confirmar", "Excluir compromisso?") != QMessageBox.Yes:
            return
        try:
            conn, cur = conectar(); cur.execute("DELETE FROM agenda WHERE titulo=? AND data=? AND hora=?", (titulo,data,hora)); conn.commit(); conn.close()
            self.load_agenda(); QMessageBox.information(self, "OK", "Removido.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    # ---------------- Finance page ----------------
    def page_financeiro(self):
        page = QWidget(); layout = QVBoxLayout(); layout.setContentsMargins(12,12,12,12)
        header = QLabel("Financeiro"); header.setFont(QFont("Segoe UI", 16, QFont.Bold)); layout.addWidget(header)
        form = QHBoxLayout()
        self.fin_desc = QLineEdit(); self.fin_desc.setPlaceholderText("Descrição")
        self.fin_tipo = QComboBox(); self.fin_tipo.addItems(["Receita", "Despesa"])
        self.fin_valor = QLineEdit(); self.fin_valor.setPlaceholderText("Valor (ex: 1200.50)")
        self.fin_data = QDateEdit(); self.fin_data.setCalendarPopup(True)
        self.btn_save_fin = QPushButton("Salvar"); self.btn_save_fin.setStyleSheet("background:#e74c3c;color:white;border-radius:6px;height:34px;")
        self.btn_save_fin.clicked.connect(self.save_fin)
        form.addWidget(self.fin_desc); form.addWidget(self.fin_tipo); form.addWidget(self.fin_valor); form.addWidget(self.fin_data); form.addWidget(self.btn_save_fin)
        layout.addLayout(form)

        actions = QHBoxLayout()
        self.btn_edit_fin = QPushButton("Editar selecionado"); self.btn_del_fin = QPushButton("Excluir selecionado")
        self.btn_edit_fin.clicked.connect(self.edit_finance); self.btn_del_fin.clicked.connect(self.delete_finance)
        actions.addWidget(self.btn_edit_fin); actions.addWidget(self.btn_del_fin); layout.addLayout(actions)

        self.tbl_fin = QTableWidget(); self.tbl_fin.setColumnCount(4)
        self.tbl_fin.setHorizontalHeaderLabels(["Descrição","Tipo","Valor","Data"])
        self.tbl_fin.setAlternatingRowColors(True)
        layout.addWidget(self.tbl_fin)
        page.setLayout(layout); self.stacked.addWidget(page)
        self.load_finance()

    def save_fin(self):
        desc = self.fin_desc.text().strip(); tipo = self.fin_tipo.currentText(); valtxt = self.fin_valor.text().strip()
        date = self.fin_data.date().toString("yyyy-MM-dd")
        if not desc or not valtxt:
            QMessageBox.warning(self, "Erro", "Preencha descrição e valor.")
            return
        try:
            valor = float(valtxt.replace(",", "."))
        except:
            QMessageBox.warning(self, "Erro", "Valor inválido.")
            return
        try:
            conn, cur = conectar(); cur.execute("INSERT INTO financeiro (descricao,tipo,valor,data) VALUES (?,?,?,?)",(desc,tipo,valor,date)); conn.commit(); conn.close()
            self.fin_desc.clear(); self.fin_valor.clear(); self.load_finance(); QMessageBox.information(self, "OK", "Registro salvo.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    def load_finance(self):
        conn, cur = conectar(); cur.execute("SELECT descricao,tipo,valor,data FROM financeiro ORDER BY data DESC"); rows = cur.fetchall(); conn.close()
        self.tbl_fin.setRowCount(len(rows))
        for i, r in enumerate(rows):
            for j, val in enumerate(r):
                item = QTableWidgetItem(str(val)); item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                self.tbl_fin.setItem(i, j, item)
        self.tbl_fin.resizeColumnsToContents()

    def edit_finance(self):
        row = self.tbl_fin.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um registro.")
            return
        desc = self.tbl_fin.item(row,0).text(); tipo = self.tbl_fin.item(row,1).text(); valor = self.tbl_fin.item(row,2).text(); data = self.tbl_fin.item(row,3).text()
        conn, cur = conectar(); cur.execute("SELECT id FROM financeiro WHERE descricao=? AND tipo=? AND valor=? AND data=? LIMIT 1", (desc,tipo,valor,data)); rec = cur.fetchone(); conn.close()
        if not rec:
            QMessageBox.warning(self, "Erro", "Registro não encontrado."); return
        fid = rec[0]
        dlg = QDialog(self); dlg.setWindowTitle("Editar Financeiro"); dlg.setFixedSize(600,240)
        v = QVBoxLayout()
        d_desc = QLineEdit(desc); d_tipo = QComboBox(); d_tipo.addItems(["Receita","Despesa"]); d_tipo.setCurrentText(tipo)
        d_valor = QLineEdit(valor); d_data = QDateEdit(); d_data.setCalendarPopup(True); d_data.setDate(d_data.date().fromString(data, "yyyy-MM-dd"))
        v.addWidget(QLabel("Descrição:")); v.addWidget(d_desc); v.addWidget(QLabel("Tipo:")); v.addWidget(d_tipo)
        v.addWidget(QLabel("Valor:")); v.addWidget(d_valor); v.addWidget(QLabel("Data:")); v.addWidget(d_data)
        h = QHBoxLayout(); btn_ok = QPushButton("Atualizar"); btn_cancel = QPushButton("Cancelar")
        btn_ok.clicked.connect(lambda: self.do_update_finance(fid, d_desc.text(), d_tipo.currentText(), d_valor.text(), d_data.date().toString("yyyy-MM-dd"), dlg))
        btn_cancel.clicked.connect(dlg.reject); h.addWidget(btn_ok); h.addWidget(btn_cancel)
        v.addLayout(h); dlg.setLayout(v); dlg.exec_()

    def do_update_finance(self, fid, desc, tipo, valor_txt, date, dlg):
        try:
            valor = float(valor_txt.replace(",", "."))
        except:
            QMessageBox.warning(dlg, "Erro", "Valor inválido."); return
        try:
            conn, cur = conectar(); cur.execute("UPDATE financeiro SET descricao=?,tipo=?,valor=?,data=? WHERE id=?", (desc.strip(), tipo, valor, date, fid)); conn.commit(); conn.close()
            dlg.accept(); self.load_finance(); QMessageBox.information(self, "OK", "Atualizado.")
        except Exception as e:
            QMessageBox.critical(dlg, "Erro", str(e))

    def delete_finance(self):
        row = self.tbl_fin.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um registro.")
            return
        desc = self.tbl_fin.item(row,0).text(); tipo = self.tbl_fin.item(row,1).text(); valor = self.tbl_fin.item(row,2).text(); data = self.tbl_fin.item(row,3).text()
        if QMessageBox.question(self, "Confirmar", "Excluir registro?") != QMessageBox.Yes:
            return
        try:
            conn, cur = conectar(); cur.execute("DELETE FROM financeiro WHERE descricao=? AND tipo=? AND valor=? AND data=?", (desc,tipo,valor,data)); conn.commit(); conn.close()
            self.load_finance(); QMessageBox.information(self, "OK", "Removido.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    # ---------------- Reports page ----------------
    def page_reports(self):
        page = QWidget(); layout = QVBoxLayout(); layout.setContentsMargins(12,12,12,12)
        header = QLabel("Relatórios"); header.setFont(QFont("Segoe UI", 16, QFont.Bold)); layout.addWidget(header)

        # filters area
        filt = QHBoxLayout()
        self.rep_type = QComboBox(); self.rep_type.addItems(["Clientes","Processos","Financeiro","Agenda"])
        self.rep_from = QDateEdit(); self.rep_from.setCalendarPopup(True)
        self.rep_to = QDateEdit(); self.rep_to.setCalendarPopup(True)
        self.rep_cliente_filter = QComboBox()  # for processes filter
        self.btn_generate = QPushButton("Gerar PDF"); self.btn_generate.setStyleSheet("background:#2c3e50;color:white;border-radius:6px;height:34px;")
        self.btn_generate.clicked.connect(self.generate_pdf)
        self.btn_export_csv = QPushButton("Exportar CSV"); self.btn_export_csv.clicked.connect(self.export_csv)
        self.btn_export_xlsx = QPushButton("Exportar Excel (xlsx)"); self.btn_export_xlsx.clicked.connect(self.export_xlsx)
        self.btn_select_logo = QPushButton("Selecionar logo (opcional)"); self.btn_select_logo.clicked.connect(self.select_logo)
        self.lbl_logo = QLabel("Nenhum logo")

        filt.addWidget(QLabel("Tipo:")); filt.addWidget(self.rep_type)
        filt.addWidget(QLabel("De:")); filt.addWidget(self.rep_from)
        filt.addWidget(QLabel("Até:")); filt.addWidget(self.rep_to)
        filt.addWidget(QLabel("Cliente filtro:")); filt.addWidget(self.rep_cliente_filter)
        filt.addWidget(self.btn_generate); filt.addWidget(self.btn_export_csv); filt.addWidget(self.btn_export_xlsx)
        filt.addWidget(self.btn_select_logo); filt.addWidget(self.lbl_logo)
        layout.addLayout(filt)
        page.setLayout(layout); self.stacked.addWidget(page)
        self.load_report_defaults()

    def load_report_defaults(self):
        # set default dates to today
        today = datetime.today()
        self.rep_from.setDate(self.rep_from.date().fromString(today.strftime("%Y-%m-%d"), "yyyy-MM-dd"))
        self.rep_to.setDate(self.rep_to.date().fromString(today.strftime("%Y-%m-%d"), "yyyy-MM-dd"))
        self.load_clients_filter()

    def load_clients_filter(self):
        self.rep_cliente_filter.clear(); self.rep_cliente_filter.addItem("Todos", None)
        conn, cur = conectar(); cur.execute("SELECT id,nome FROM clientes ORDER BY nome")
        for id_, nome in cur.fetchall():
            self.rep_cliente_filter.addItem(nome, id_)
        conn.close()

    def select_logo(self):
        path, _ = QFileDialog.getOpenFileName(self, "Escolher logo", "", "Imagens (*.png *.jpg *.jpeg *.bmp)")
        if path:
            self.logo_path = path; self.lbl_logo.setText(os.path.basename(path))
        else:
            self.logo_path = None; self.lbl_logo.setText("Nenhum logo")

    def generate_pdf(self):
        tipo = self.rep_type.currentText()
        cpath, _ = QFileDialog.getSaveFileName(self, "Salvar PDF", "", "PDF (*.pdf)")
        if not cpath:
            return
        fecha_de = self.rep_from.date().toString("yyyy-MM-dd"); fecha_ate = self.rep_to.date().toString("yyyy-MM-dd")
        cliente_filter = self.rep_cliente_filter.currentData()
        try:
            c = canvas.Canvas(cpath, pagesize=A4); largura, altura = A4; y = altura - 50
            # logo
            if getattr(self, "logo_path", None) and os.path.exists(self.logo_path):
                try:
                    c.drawImage(self.logo_path, largura-140, altura-80, width=100, preserveAspectRatio=True, mask='auto')
                except Exception:
                    pass
            c.setFont("Helvetica-Bold", 16); c.drawString(50, y, f"Relatório: {tipo}"); y -= 30; c.setFont("Helvetica", 11)
            conn, cur = conectar()
            if tipo == "Clientes":
                cur.execute("SELECT id,nome,cpf_cnpj,telefone,email,endereco FROM clientes ORDER BY nome")
                for row in cur.fetchall():
                    txt = f"{row[0]} - {row[1]} - {row[2]} - {row[3]} - {row[4]} - {row[5]}"
                    c.drawString(50, y, txt); y -= 16
                    if y < 60: c.showPage(); y = altura - 50
            elif tipo == "Processos":
                q = """SELECT p.id, c.nome, p.numero, p.tipo, p.status, p.data_abertura, p.descricao
                       FROM processos p LEFT JOIN clientes c ON p.cliente_id=c.id
                       WHERE p.data_abertura BETWEEN ? AND ?"""
                params = [fecha_de, fecha_ate]
                if cliente_filter:
                    q += " AND p.cliente_id = ?"; params.append(cliente_filter)
                q += " ORDER BY p.data_abertura DESC"
                cur.execute(q, params)
                for row in cur.fetchall():
                    txt = f"{row[0]} - {row[1]} - Nº:{row[2]} - {row[3]} - {row[4]} - {row[5]}"
                    c.drawString(50, y, txt); y -= 16
                    if y < 60: c.showPage(); y = altura - 50
            elif tipo == "Financeiro":
                cur.execute("SELECT descricao,tipo,valor,data FROM financeiro WHERE data BETWEEN ? AND ? ORDER BY data DESC",(fecha_de, fecha_ate))
                for row in cur.fetchall():
                    txt = f"{row[0]} - {row[1]} - R$ {row[2]} - {row[3]}"
                    c.drawString(50, y, txt); y -= 16
                    if y < 60: c.showPage(); y = altura - 50
            elif tipo == "Agenda":
                cur.execute("SELECT titulo,descricao,data,hora FROM agenda WHERE data BETWEEN ? AND ? ORDER BY data DESC",(fecha_de, fecha_ate))
                for row in cur.fetchall():
                    txt = f"{row[0]} - {row[1]} - {row[2]} {row[3]}"
                    c.drawString(50, y, txt); y -= 16
                    if y < 60: c.showPage(); y = altura - 50
            conn.close()
            c.save()
            QMessageBox.information(self, "OK", f"PDF gerado: {cpath}")
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Falha ao gerar PDF:\n{e}")

    def export_csv(self):
        tipo = self.rep_type.currentText()
        path, _ = QFileDialog.getSaveFileName(self, "Salvar CSV", "", "CSV (*.csv)")
        if not path:
            return
        de = self.rep_from.date().toString("yyyy-MM-dd"); ate = self.rep_to.date().toString("yyyy-MM-dd")
        client = self.rep_cliente_filter.currentData()
        try:
            conn, cur = conectar()
            if tipo == "Clientes":
                cur.execute("SELECT id,nome,cpf_cnpj,telefone,email,endereco FROM clientes ORDER BY nome")
                rows = cur.fetchall(); headers = ["id","nome","cpf_cnpj","telefone","email","endereco"]
            elif tipo == "Processos":
                q = """SELECT p.id, c.nome, p.numero, p.tipo, p.status, p.data_abertura, p.descricao
                       FROM processos p LEFT JOIN clientes c ON p.cliente_id=c.id
                       WHERE p.data_abertura BETWEEN ? AND ?"""
                params=[de,ate]
                if client:
                    q += " AND p.cliente_id = ?"; params.append(client)
                q += " ORDER BY p.data_abertura DESC"
                cur.execute(q, params); rows = cur.fetchall(); headers = ["id","cliente","numero","tipo","status","data_abertura","descricao"]
            elif tipo == "Financeiro":
                cur.execute("SELECT descricao,tipo,valor,data FROM financeiro WHERE data BETWEEN ? AND ? ORDER BY data DESC",(de,ate)); rows = cur.fetchall(); headers=["descricao","tipo","valor","data"]
            elif tipo == "Agenda":
                cur.execute("SELECT titulo,descricao,data,hora FROM agenda WHERE data BETWEEN ? AND ? ORDER BY data DESC",(de,ate)); rows = cur.fetchall(); headers=["titulo","descricao","data","hora"]
            conn.close()
            with open(path, "w", newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(headers)
                for r in rows:
                    writer.writerow(r)
            QMessageBox.information(self, "OK", f"CSV exportado em:\n{path}")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    def export_xlsx(self):
        if not HAVE_XLSXWRITER:
            QMessageBox.warning(self, "Dependência", "xlsxwriter não instalado. Instale com: pip install xlsxwriter")
            return
        tipo = self.rep_type.currentText()
        path, _ = QFileDialog.getSaveFileName(self, "Salvar Excel", "", "Excel (*.xlsx)")
        if not path:
            return
        de = self.rep_from.date().toString("yyyy-MM-dd"); ate = self.rep_to.date().toString("yyyy-MM-dd")
        client = self.rep_cliente_filter.currentData()
        try:
            conn, cur = conectar()
            if tipo == "Clientes":
                cur.execute("SELECT id,nome,cpf_cnpj,telefone,email,endereco FROM clientes ORDER BY nome"); rows = cur.fetchall(); headers = ["ID","Nome","CPF/CNPJ","Telefone","Email","Endereco"]
            elif tipo == "Processos":
                q = """SELECT p.id, c.nome, p.numero, p.tipo, p.status, p.data_abertura, p.descricao
                       FROM processos p LEFT JOIN clientes c ON p.cliente_id=c.id
                       WHERE p.data_abertura BETWEEN ? AND ?"""
                params=[de,ate]
                if client:
                    q += " AND p.cliente_id = ?"; params.append(client)
                q += " ORDER BY p.data_abertura DESC"
                cur.execute(q, params); rows = cur.fetchall(); headers = ["ID","Cliente","Número","Tipo","Status","Data Abertura","Descrição"]
            elif tipo == "Financeiro":
                cur.execute("SELECT descricao,tipo,valor,data FROM financeiro WHERE data BETWEEN ? AND ? ORDER BY data DESC",(de,ate)); rows = cur.fetchall(); headers=["Descrição","Tipo","Valor","Data"]
            elif tipo == "Agenda":
                cur.execute("SELECT titulo,descricao,data,hora FROM agenda WHERE data BETWEEN ? AND ? ORDER BY data DESC",(de,ate)); rows = cur.fetchall(); headers=["Título","Descrição","Data","Hora"]
            conn.close()
            workbook = xlsxwriter.Workbook(path); ws = workbook.add_worksheet("Relatório")
            # formats
            bold = workbook.add_format({'bold': True})
            for col, h in enumerate(headers):
                ws.write(0, col, h, bold)
            for r, row in enumerate(rows, start=1):
                for c, val in enumerate(row):
                    ws.write(r, c, val)
            workbook.close()
            QMessageBox.information(self, "OK", f"Excel salvo em:\n{path}")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    # ---------------- Users page ----------------
    def page_users(self):
        page = QWidget(); layout = QVBoxLayout(); layout.setContentsMargins(12,12,12,12)
        header = QLabel("Gestão de Usuários"); header.setFont(QFont("Segoe UI", 16, QFont.Bold)); layout.addWidget(header)
        form = QHBoxLayout()
        self.u_name = QLineEdit(); self.u_name.setPlaceholderText("Nome")
        self.u_login = QLineEdit(); self.u_login.setPlaceholderText("Login")
        self.u_pwd = QLineEdit(); self.u_pwd.setPlaceholderText("Senha"); self.u_pwd.setEchoMode(QLineEdit.Password)
        self.u_level = QComboBox(); self.u_level.addItems(["admin","advogado","assistente"])
        self.btn_create_user = QPushButton("Criar usuário"); self.btn_create_user.setStyleSheet("background:#27ae60;color:white;border-radius:6px;height:34px;")
        self.btn_create_user.clicked.connect(self.create_user)
        form.addWidget(self.u_name); form.addWidget(self.u_login); form.addWidget(self.u_pwd); form.addWidget(self.u_level); form.addWidget(self.btn_create_user)
        layout.addLayout(form)

        actions = QHBoxLayout()
        self.btn_edit_user = QPushButton("Editar selecionado"); self.btn_del_user = QPushButton("Excluir selecionado"); self.btn_reset_pwd = QPushButton("Reset senha (para admin)")
        self.btn_edit_user.clicked.connect(self.edit_user); self.btn_del_user.clicked.connect(self.delete_user); self.btn_reset_pwd.clicked.connect(self.reset_user_pwd)
        actions.addWidget(self.btn_edit_user); actions.addWidget(self.btn_del_user); actions.addWidget(self.btn_reset_pwd)
        layout.addLayout(actions)

        self.tbl_users = QTableWidget(); self.tbl_users.setColumnCount(4)
        self.tbl_users.setHorizontalHeaderLabels(["ID","Nome","Login","Nível"])
        layout.addWidget(self.tbl_users)
        page.setLayout(layout); self.stacked.addWidget(page)
        self.load_users()

    def create_user(self):
        nome = self.u_name.text().strip(); login = self.u_login.text().strip(); pwd = self.u_pwd.text().strip(); level = self.u_level.currentText()
        if not nome or not login or not pwd:
            QMessageBox.warning(self, "Erro", "Preencha nome, login e senha.")
            return
        try:
            hashed = hash_password(pwd)
            conn, cur = conectar(); cur.execute("INSERT INTO usuarios (nome,login,senha,nivel) VALUES (?,?,?,?)",(nome,login,hashed,level)); conn.commit(); conn.close()
            self.u_name.clear(); self.u_login.clear(); self.u_pwd.clear(); self.load_users()
            QMessageBox.information(self, "OK", "Usuário criado.")
        except sqlite3.IntegrityError:
            QMessageBox.warning(self, "Erro", "Login já existe.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    def load_users(self):
        conn, cur = conectar(); cur.execute("SELECT id,nome,login,nivel FROM usuarios ORDER BY nome"); rows = cur.fetchall(); conn.close()
        self.tbl_users.setRowCount(len(rows))
        for i, r in enumerate(rows):
            for j, val in enumerate(r):
                item = QTableWidgetItem(str(val)); item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                self.tbl_users.setItem(i, j, item)
        self.tbl_users.resizeColumnsToContents()

    def edit_user(self):
        row = self.tbl_users.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um usuário.")
            return
        uid = self.tbl_users.item(row,0).text()
        conn, cur = conectar(); cur.execute("SELECT nome,login,nivel FROM usuarios WHERE id=?", (uid,)); rec = cur.fetchone(); conn.close()
        if not rec:
            QMessageBox.warning(self, "Erro", "Usuário não encontrado."); return
        dlg = QDialog(self); dlg.setWindowTitle("Editar Usuário"); dlg.setFixedSize(600,260)
        v = QVBoxLayout()
        e_name = QLineEdit(rec[0]); e_login = QLineEdit(rec[1]); e_level = QComboBox(); e_level.addItems(["admin","advogado","assistente"]); e_level.setCurrentText(rec[2])
        v.addWidget(QLabel("Nome:")); v.addWidget(e_name); v.addWidget(QLabel("Login:")); v.addWidget(e_login); v.addWidget(QLabel("Nível:")); v.addWidget(e_level)
        h = QHBoxLayout(); btn_ok = QPushButton("Atualizar"); btn_cancel = QPushButton("Cancelar")
        btn_ok.clicked.connect(lambda: self.do_update_user(uid, e_name.text(), e_login.text(), e_level.currentText(), dlg))
        btn_cancel.clicked.connect(dlg.reject); h.addWidget(btn_ok); h.addWidget(btn_cancel)
        v.addLayout(h); dlg.setLayout(v); dlg.exec_()

    def do_update_user(self, uid, nome, login, level, dlg):
        if not nome.strip() or not login.strip():
            QMessageBox.warning(dlg, "Erro", "Nome e login obrigatórios."); return
        try:
            conn, cur = conectar(); cur.execute("UPDATE usuarios SET nome=?, login=?, nivel=? WHERE id=?", (nome.strip(), login.strip(), level, uid)); conn.commit(); conn.close()
            dlg.accept(); self.load_users(); QMessageBox.information(self, "OK", "Atualizado.")
        except sqlite3.IntegrityError:
            QMessageBox.warning(dlg, "Erro", "Login já existe.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    def delete_user(self):
        row = self.tbl_users.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um usuário.")
            return
        uid = self.tbl_users.item(row,0).text()
        if QMessageBox.question(self, "Confirmar", "Excluir usuário?") != QMessageBox.Yes:
            return
        try:
            conn, cur = conectar(); cur.execute("DELETE FROM usuarios WHERE id=?", (uid,)); conn.commit(); conn.close()
            self.load_users(); QMessageBox.information(self, "OK", "Usuário excluído.")
        except Exception as e:
            QMessageBox.critical(self, "Erro", str(e))

    def reset_user_pwd(self):
        row = self.tbl_users.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Aviso", "Selecione um usuário.")
            return
        uid = self.tbl_users.item(row,0).text()
        new_pwd, ok = QFileDialog.getSaveFileName(self, "Reset de senha - digite nova senha no nome do arquivo (hack temporário)", "", "TXT (*.txt)")
        # We use a safer approach: ask input dialog would be better; but to keep it inline, we'll prompt a simple dialog
        if not ok:
            # fallback to input dialog
            from PyQt5.QtWidgets import QInputDialog
            text, ok2 = QInputDialog.getText(self, "Nova senha", "Digite a nova senha (será hasheada):", QLineEdit.Normal)
            if not ok2 or not text:
                return
            new_hash = hash_password(text)
            try:
                conn, cur = conectar(); cur.execute("UPDATE usuarios SET senha=? WHERE id=?", (new_hash, uid)); conn.commit(); conn.close()
                QMessageBox.information(self, "OK", "Senha atualizada.")
            except Exception as e:
                QMessageBox.critical(self, "Erro", str(e))
        else:
            # if user used file selector, use the filename as password (not ideal); we'll extract basename
            basename = os.path.basename(new_pwd)
            new_hash = hash_password(basename)
            try:
                conn, cur = conectar(); cur.execute("UPDATE usuarios SET senha=? WHERE id=?", (new_hash, uid)); conn.commit(); conn.close()
                QMessageBox.information(self, "OK", "Senha atualizada (a partir do nome do arquivo).")
            except Exception as e:
                QMessageBox.critical(self, "Erro", str(e))

    # ---------------- Utilities ----------------
    def refresh_all(self):
        self.load_clients(); self.load_process_clients_combo(); self.load_processes(); self.load_agenda(); self.load_finance(); self.load_users(); self.load_report_defaults()

    def load_process_clients_combo(self):
        # used when refreshing
        try:
            self.pro_cliente.clear()
            conn, cur = conectar(); cur.execute("SELECT id,nome FROM clientes ORDER BY nome")
            for id_, nome in cur.fetchall(): self.pro_cliente.addItem(nome, id_)
            conn.close()
        except Exception:
            pass

    # called after app builds to ensure combos filled
    def refresh_loaded(self):
        self.load_clients(); self.load_process_clients_combo(); self.load_processes(); self.load_agenda(); self.load_finance(); self.load_users(); self.load_clients_filter()

# -------------------- Main --------------------
def ensure_admin():
    conn, cur = conectar()
    cur.execute("SELECT id FROM usuarios WHERE login='admin'")
    if not cur.fetchone():
        cur.execute("INSERT INTO usuarios (nome,login,senha,nivel) VALUES (?,?,?,?)", ("Administrador","admin", hash_password("admin"), "admin"))
        conn.commit()
    conn.close()

def main():
    ensure_admin()
    app = QApplication(sys.argv)
    login = LoginDialog()
    if login.exec_() == QDialog.Accepted:
        main_win = AdvocaciaApp()
        main_win.show()
        # ensure UI elements filled
        main_win.refresh_loaded()
        sys.exit(app.exec_())

if __name__ == "__main__":
    main()

# -------------------- PyInstaller instructions --------------------
# To create a Windows .exe (example):
# pip install pyinstaller
# pyinstaller --onefile --windowed --add-data "advocacia.db;." advocacia_app_full.py
# This will create dist/advocacia_app_full.exe (test carefully; include any logo/image files in --add-data)
